declare -x AUTOJUMP_ERROR_PATH="/home/cyang02/.local/share/autojump/errors.log"
declare -x AUTOJUMP_SOURCED="1"
declare -x GUILE_LOAD_COMPILED_PATH="/usr/local/lib/guile/3.0/site-ccache"
declare -x GUILE_LOAD_PATH="/usr/local/share/guile/site/3.0"
declare -x GUILE_SYSTEM_EXTENSIONS_PATH="/usr/local/lib/guile/3.0/extensions"
declare -x GUILE_TLS_CERTIFICATE_DIRECTORY="/usr/local/etc/gnutls/"
declare -x HISTFILE="/home/cyang02/.zsh_history"
declare -x HISTFILESIZE="1000000000"
declare -x HISTSIZ="999999999"
declare -x HISTSIZE="1000000000"
declare -x HISTTIMEFORMAT="[%F %T] "
declare -x HOME="/home/cyang02"
declare -x HOSTTYPE="x86_64"
declare -x LANG="C.UTF-8"
declare -x LESS="-R"
declare -x LOGNAME="cyang02"
declare -x LSCOLORS="Gxfxcxdxbxegedabagacad"
declare -x LS_COLORS="rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:"
declare -x NAME="DESKTOP-2J2HCIQ"
declare -x OLDPWD="/home/cyang02"
declare -x P9K_SSH="0"
declare -x P9K_TTY="old"
declare -x PAGER="less"
declare -x PATH="/home/cyang02/.autojump/bin:/home/cyang02/.krew/bin:/home/cyang02/.krew/bin:/home/cyang02/.pyenv/shims:/home/cyang02/.autojump/bin:/home/cyang02/:/Users/cyang02/go/bin:/home/cyang02/.pyenv/plugins/pyenv-virtualenv/shims:/home/cyang02/.pyenv/shims:/home/cyang02/.pyenv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/lib/wsl/lib:/mnt/c/Windows/system32:/mnt/c/Windows:/mnt/c/Windows/System32/Wbem:/mnt/c/Windows/System32/WindowsPowerShell/v1.0/:/mnt/c/Windows/System32/OpenSSH/:/mnt/c/Program Files (x86)/NVIDIA Corporation/PhysX/Common:/mnt/c/Program Files/NVIDIA Corporation/NVIDIA NvDLISR:/mnt/c/Program Files/Go/bin:/mnt/c/Program Files/Docker/Docker/resources/bin:/mnt/c/ProgramData/DockerDesktop/version-bin:/mnt/c/WINDOWS/system32:/mnt/c/WINDOWS:/mnt/c/WINDOWS/System32/Wbem:/mnt/c/WINDOWS/System32/WindowsPowerShell/v1.0/:/mnt/c/WINDOWS/System32/OpenSSH/:/mnt/c/Users/USER/AppData/Local/Microsoft/WindowsApps:/mnt/c/Users/USER/AppData/Local/Programs/Microsoft VS Code/bin:/mnt/c/Users/USER/go/bin
fpath=(/home/cyang02/.autojump/functions /usr/local/share/zsh/site-functions /usr/share/zsh/vendor-functions /usr/share/zsh/vendor-completions /usr/share/zsh/functions/Calendar /usr/share/zsh/functions/Chpwd /usr/share/zsh/functions/Completion /usr/share/zsh/functions/Completion/AIX /usr/share/zsh/functions/Completion/BSD /usr/share/zsh/functions/Completion/Base /usr/share/zsh/functions/Completion/Cygwin /usr/share/zsh/functions/Completion/Darwin /usr/share/zsh/functions/Completion/Debian /usr/share/zsh/functions/Completion/Linux /usr/share/zsh/functions/Completion/Mandriva /usr/share/zsh/functions/Completion/Redhat /usr/share/zsh/functions/Completion/Solaris /usr/share/zsh/functions/Completion/Unix /usr/share/zsh/functions/Completion/X /usr/share/zsh/functions/Completion/Zsh /usr/share/zsh/functions/Completion/openSUSE /usr/share/zsh/functions/Exceptions /usr/share/zsh/functions/MIME /usr/share/zsh/functions/Math /usr/share/zsh/functions/Misc /usr/share/zsh/functions/Newuser /usr/share/zsh/functions/Prompts /usr/share/zsh/functions/TCP /usr/share/zsh/functions/VCS_Info /usr/share/zsh/functions/VCS_Info/Backends /usr/share/zsh/functions/Zftp /usr/share/zsh/functions/Zle ~/.zsh/completion):/mnt/c/Program Files/Oracle/VirtualBox"
declare -x PWD="/home/cyang02/kind-lab"
declare -x PYENV_ROOT="/home/cyang02/.pyenv"
declare -x PYENV_SHELL="zsh"
declare -x PYENV_VIRTUALENV_DISABLE_PROMPT="1"
declare -x PYENV_VIRTUALENV_INIT="1"
declare -x SAVEHIST="1000000000"
declare -x SHELL="/usr/bin/zsh"
declare -x SHLVL="4"
declare -x TERM="xterm-256color"
declare -x THEFUCK_INSTANT_MODE="True"
declare -x THEFUCK_OUTPUT_LOG="/tmp/thefuck-script-log-38fc02b2191b476888633c0e77e847d3"
declare -x USER="cyang02"
declare -x USER_EMAIL="@binance.com"
declare -x USER_NAME="joe.yang"
declare -x VAGRANT_WSL_ENABLE_WINDOWS_ACCESS="1"
declare -x WSLENV="WT_SESSION::WT_PROFILE_ID"
declare -x WSL_DISTRO_NAME="Ubuntu-20.04"
declare -x WSL_INTEROP="/run/WSL/733_interop"
declare -x WT_PROFILE_ID="{07b52e3e-de2c-5db4-bd2d-ba144ed6c273}"
declare -x WT_SESSION="705c69e0-a41a-408c-82ce-a2147b76b74e"
declare -x ZSH="/home/cyang02/.oh-my-zsh"
declare -x _="/usr/bin/bash"
declare -x _P9K_TTY="/dev/pts/1"
fullnameOverride: "kube-prometheus-stack"
alertmanager:
  ingress:
    enabled: true
    hosts:
      - alertmanager.foo.org
    annotations:
      kubernetes.io/ingress.class: nginx
    paths:
      - /
    pathType: ImplementationSpecific
  alertmanagerSpec:
    replicas: 1
    externalUrl: http://alertmanager.foo.org
    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: standard
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 100Mi



  config:
    global:
      resolve_timeout: 5m
      slack_api_url:  
    route:
      group_by: ['alertname']
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 12h
      receiver: 'default_all'
      routes:
      - match:
          severity: critical
        receiver: 'bot-critical'
    receivers:
    - name: 'default_all'
      slack_configs:
      - send_resolved: true
        channel: '#bot'
        title: '{{ template "slack.ps.title" . }}'
        color: '{{ if eq .Status "firing" }}{{ if eq .CommonLabels.severity "critical" }}danger{{ else }}warning{{ end }}{{ else }}good{{ end }}'
        text: '{{ template "slack.ps.text" . }}'
      webhook_configs:
      - send_resolved: true
        http_config: {}
        url:  
    - name: bot-critical
      slack_configs:
      - send_resolved: true
        channel: '#bot'
        title: '{{ template "slack.ps.title" . }}'
        color: '{{ if eq .Status "firing" }}{{ if eq .CommonLabels.severity "critical" }}danger{{ else }}warning{{     end }}{{ else }}good{{ end }}'
        text: '{{ template "slack.ps.text" . }}'
      webhook_configs:
      - send_resolved: true
        http_config: {}
        url:  
    templates:
    - '/etc/alertmanager/config/*.tmpl'

  tplConfig: false
  templateFiles:
    ps.tmpl: |-
      {{ define "slack.ps.title" }}[{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ .CommonLabels.prometheus_premise | toUpper }} {{ .CommonLabels.prometheus_env | toUpper }}{{ end }}

      {{ define "slack.ps.text" }} {{ range .Alerts }}
      **ENV:** \`KIND\`
      **Alert:** {{ .Labels.alertname }} - **{{ .Labels.severity | toUpper }}**
      **Description:** {{ .Annotations.message }}
      **Details:**
      {{ range .Labels.SortedPairs }} â€¢ **{{ .Name }}:** \`{{ .Value }}\`
      {{ end }} {{ end }} {{ end }}
coreDns:
  enabled: false
kubeDns:
  enabled: true


## Using default values from https://github.com/grafana/helm-charts/blob/main/charts/grafana/values.yaml
##
grafana:
  adminPassword: admin
  plugins:
    - grafana-kubernetes-app
  ingress:
    enabled: true
    hosts:
      - grafana.foo.org
    annotations:
      kubernetes.io/ingress.class: nginx
    path: /
    pathType: ImplementationSpecific

prometheusOperator:
  resources:
    limits:
      cpu: 200m
      memory: 200Mi
    requests:
      cpu: 100m
      memory: 100Mi


prometheus:
  ingress:
    enabled: true
    #ingressClassName: gce-internal
    hosts:
      - prometheus.foo.org
    annotations:
      kubernetes.io/ingress.class: nginx
    path: /
    pathType: ImplementationSpecific
  prometheusSpec:
    retention: 10d
    retentionSize: ""
    replicas: 1
    shards: 1
    logLevel: info
    resources:
      requests:
        memory: 400Mi
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: standard
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 20Mi


    additionalScrapeConfigs: []
    # - job_name: kube-etcd
    #   kubernetes_sd_configs:
    #     - role: node
    #   scheme: https
    #   tls_config:
    #     ca_file:   /etc/prometheus/secrets/etcd-client-cert/etcd-ca
    #     cert_file: /etc/prometheus/secrets/etcd-client-cert/etcd-client
    #     key_file:  /etc/prometheus/secrets/etcd-client-cert/etcd-client-key
    #   relabel_configs:
    #   - action: labelmap
    #     regex: __meta_kubernetes_node_label_(.+)
    #   - source_labels: [__address__]
    #     action: replace
    #     targetLabel: __address__
    #     regex: ([^:;]+):(\d+)
    #     replacement: ${1}:2379
    #   - source_labels: [__meta_kubernetes_node_name]
    #     action: keep
    #     regex: .*mst.*
    #   - source_labels: [__meta_kubernetes_node_name]
    #     action: replace
    #     targetLabel: node
    #     regex: (.*)
    #     replacement: ${1}
    #   metric_relabel_configs:
    #   - regex: (kubernetes_io_hostname|failure_domain_beta_kubernetes_io_region|beta_kubernetes_io_os|beta_kubernetes_io_arch|beta_kubernetes_io_instance_type|failure_domain_beta_kubernetes_io_zone)
    #     action: labeldrop
