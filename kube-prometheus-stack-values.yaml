fullnameOverride: "kube-prometheus-stack"
alertmanager:
  ingress:
    enabled: true
    hosts:
      - alertmanager.foo.org
    annotations:
      kubernetes.io/ingress.class: nginx
    paths:
      - /
    pathType: ImplementationSpecific
  alertmanagerSpec:
    replicas: 1
    externalUrl: http://alertmanager.foo.org
    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: standard
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 100Mi



  config:
    global:
      resolve_timeout: 5m
      slack_api_url:  
    route:
      group_by: ['alertname']
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 12h
      receiver: 'default_all'
      routes:
      - match:
          severity: critical
        receiver: 'bot-critical'
    receivers:
    - name: 'default_all'
      slack_configs:
      - send_resolved: true
        channel: '#bot'
        title: '{{ template "slack.ps.title" . }}'
        color: '{{ if eq .Status "firing" }}{{ if eq .CommonLabels.severity "critical" }}danger{{ else }}warning{{ end }}{{ else }}good{{ end }}'
        text: '{{ template "slack.ps.text" . }}'
      webhook_configs:
      - send_resolved: true
        http_config: {}
        url:  
    - name: bot-critical
      slack_configs:
      - send_resolved: true
        channel: '#bot'
        title: '{{ template "slack.ps.title" . }}'
        color: '{{ if eq .Status "firing" }}{{ if eq .CommonLabels.severity "critical" }}danger{{ else }}warning{{     end }}{{ else }}good{{ end }}'
        text: '{{ template "slack.ps.text" . }}'
      webhook_configs:
      - send_resolved: true
        http_config: {}
        url:  
    templates:
    - '/etc/alertmanager/config/*.tmpl'

  tplConfig: false
  templateFiles:
    ps.tmpl: |-
      {{ define "slack.ps.title" }}[{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ .CommonLabels.prometheus_premise | toUpper }} {{ .CommonLabels.prometheus_env | toUpper }}{{ end }}

      {{ define "slack.ps.text" }} {{ range .Alerts }}
      **ENV:** \`KIND\`
      **Alert:** {{ .Labels.alertname }} - **{{ .Labels.severity | toUpper }}**
      **Description:** {{ .Annotations.message }}
      **Details:**
      {{ range .Labels.SortedPairs }} â€¢ **{{ .Name }}:** \`{{ .Value }}\`
      {{ end }} {{ end }} {{ end }}
coreDns:
  enabled: false
kubeDns:
  enabled: true


## Using default values from https://github.com/grafana/helm-charts/blob/main/charts/grafana/values.yaml
##
grafana:
  adminPassword: admin
  plugins:
    - grafana-kubernetes-app
  ingress:
    enabled: true
    hosts:
      - grafana.foo.org
    annotations:
      kubernetes.io/ingress.class: nginx
    path: /
    pathType: ImplementationSpecific

prometheusOperator:
  resources:
    limits:
      cpu: 200m
      memory: 200Mi
    requests:
      cpu: 100m
      memory: 100Mi


prometheus:
  ingress:
    enabled: true
    #ingressClassName: gce-internal
    hosts:
      - prometheus.foo.org
    annotations:
      kubernetes.io/ingress.class: nginx
    path: /
    pathType: ImplementationSpecific
  prometheusSpec:
    retention: 10d
    retentionSize: ""
    replicas: 1
    shards: 1
    logLevel: info
    resources:
      requests:
        memory: 400Mi
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: standard
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 20Mi


    additionalScrapeConfigs: []
    # - job_name: kube-etcd
    #   kubernetes_sd_configs:
    #     - role: node
    #   scheme: https
    #   tls_config:
    #     ca_file:   /etc/prometheus/secrets/etcd-client-cert/etcd-ca
    #     cert_file: /etc/prometheus/secrets/etcd-client-cert/etcd-client
    #     key_file:  /etc/prometheus/secrets/etcd-client-cert/etcd-client-key
    #   relabel_configs:
    #   - action: labelmap
    #     regex: __meta_kubernetes_node_label_(.+)
    #   - source_labels: [__address__]
    #     action: replace
    #     targetLabel: __address__
    #     regex: ([^:;]+):(\d+)
    #     replacement: ${1}:2379
    #   - source_labels: [__meta_kubernetes_node_name]
    #     action: keep
    #     regex: .*mst.*
    #   - source_labels: [__meta_kubernetes_node_name]
    #     action: replace
    #     targetLabel: node
    #     regex: (.*)
    #     replacement: ${1}
    #   metric_relabel_configs:
    #   - regex: (kubernetes_io_hostname|failure_domain_beta_kubernetes_io_region|beta_kubernetes_io_os|beta_kubernetes_io_arch|beta_kubernetes_io_instance_type|failure_domain_beta_kubernetes_io_zone)
    #     action: labeldrop
